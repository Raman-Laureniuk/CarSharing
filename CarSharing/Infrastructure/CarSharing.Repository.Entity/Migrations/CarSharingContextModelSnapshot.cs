// <auto-generated />
using System;
using CarSharing.Repository.Entity.Repository.Base.Impl;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CarSharing.Repository.Entity.Migrations
{
    [DbContext(typeof(CarSharingContext))]
    partial class CarSharingContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CarSharing.Domain.Entities.Car", b =>
                {
                    b.Property<Guid>("CarId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CarId");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Color")
                        .IsFixedLength(false);

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("Model")
                        .IsFixedLength(false);

                    b.Property<string>("PlateNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("PlateNumber")
                        .IsFixedLength(false);

                    b.Property<int>("TariffId")
                        .HasColumnType("int")
                        .HasColumnName("TariffId");

                    b.Property<int>("Year")
                        .HasColumnType("int")
                        .HasColumnName("Year");

                    b.HasKey("CarId");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("CarId"), false);

                    b.HasIndex("TariffId");

                    SqlServerIndexBuilderExtensions.IsClustered(b.HasIndex("TariffId"), false);

                    b.ToTable("Cars", (string)null);
                });

            modelBuilder.Entity("CarSharing.Domain.Entities.CarCoordinates", b =>
                {
                    b.Property<Guid>("CarId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CarId");

                    b.Property<decimal>("Latitude")
                        .HasPrecision(9, 6)
                        .HasColumnType("decimal(9,6)")
                        .HasColumnName("Latitude");

                    b.Property<decimal>("Longitude")
                        .HasPrecision(9, 6)
                        .HasColumnType("decimal(9,6)")
                        .HasColumnName("Longitude");

                    b.HasKey("CarId");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("CarId"), false);

                    b.HasIndex("Latitude", "Longitude");

                    SqlServerIndexBuilderExtensions.IsClustered(b.HasIndex("Latitude", "Longitude"), false);

                    b.ToTable("CarCoordinates", (string)null);
                });

            modelBuilder.Entity("CarSharing.Domain.Entities.Client", b =>
                {
                    b.Property<Guid>("ClientId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ClientId");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Email")
                        .IsFixedLength(false);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("IsActive");

                    b.Property<string>("LicenseNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("LicenseNumber")
                        .IsFixedLength(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Name")
                        .IsFixedLength(false);

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("PhoneNumber")
                        .IsFixedLength(false);

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Surname")
                        .IsFixedLength(false);

                    b.HasKey("ClientId");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("ClientId"), false);

                    b.HasIndex("Email");

                    SqlServerIndexBuilderExtensions.IsClustered(b.HasIndex("Email"), false);

                    b.HasIndex("IsActive");

                    SqlServerIndexBuilderExtensions.IsClustered(b.HasIndex("IsActive"), false);

                    b.HasIndex("LicenseNumber");

                    SqlServerIndexBuilderExtensions.IsClustered(b.HasIndex("LicenseNumber"), false);

                    b.HasIndex("PhoneNumber");

                    SqlServerIndexBuilderExtensions.IsClustered(b.HasIndex("PhoneNumber"), false);

                    b.HasIndex("Surname");

                    SqlServerIndexBuilderExtensions.IsClustered(b.HasIndex("Surname"), false);

                    b.ToTable("Clients", (string)null);
                });

            modelBuilder.Entity("CarSharing.Domain.Entities.Ride", b =>
                {
                    b.Property<int>("RideId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("RideId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RideId"));

                    b.Property<Guid>("CarId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CarId");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ClientId");

                    b.Property<DateTime?>("EndDateUtc")
                        .HasPrecision(7)
                        .HasColumnType("datetime2(7)")
                        .HasColumnName("EndDateUtc");

                    b.Property<DateTime>("StartDateUtc")
                        .HasPrecision(7)
                        .HasColumnType("datetime2(7)")
                        .HasColumnName("StartDateUtc");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("Status");

                    b.Property<decimal?>("TotalAmount")
                        .HasPrecision(9, 2)
                        .HasColumnType("decimal(9,2)")
                        .HasColumnName("TotalAmount");

                    b.Property<int>("WalletId")
                        .HasColumnType("int")
                        .HasColumnName("WalletId");

                    b.HasKey("RideId");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("RideId"));

                    b.HasIndex("CarId");

                    SqlServerIndexBuilderExtensions.IsClustered(b.HasIndex("CarId"), false);

                    b.HasIndex("ClientId");

                    SqlServerIndexBuilderExtensions.IsClustered(b.HasIndex("ClientId"), false);

                    b.HasIndex("WalletId");

                    SqlServerIndexBuilderExtensions.IsClustered(b.HasIndex("WalletId"), false);

                    b.ToTable("Rides", (string)null);
                });

            modelBuilder.Entity("CarSharing.Domain.Entities.Tariff", b =>
                {
                    b.Property<int>("TariffId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TariffId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TariffId"));

                    b.Property<decimal>("PricePerHour")
                        .HasPrecision(9, 2)
                        .HasColumnType("decimal(9,2)")
                        .HasColumnName("PricePerHour");

                    b.HasKey("TariffId");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("TariffId"));

                    b.ToTable("Tariffs", (string)null);
                });

            modelBuilder.Entity("CarSharing.Domain.Entities.Wallet", b =>
                {
                    b.Property<int>("WalletId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("WalletId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WalletId"));

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ClientId");

                    b.Property<string>("EncryptedWalletData")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("EncryptedWalletData")
                        .IsFixedLength(false);

                    b.HasKey("WalletId");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("WalletId"));

                    b.HasIndex("ClientId");

                    SqlServerIndexBuilderExtensions.IsClustered(b.HasIndex("ClientId"), false);

                    b.ToTable("Wallets", (string)null);
                });

            modelBuilder.Entity("CarSharing.Domain.Entities.Car", b =>
                {
                    b.HasOne("CarSharing.Domain.Entities.Tariff", "Tariff")
                        .WithMany("Cars")
                        .HasForeignKey("TariffId")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.Navigation("Tariff");
                });

            modelBuilder.Entity("CarSharing.Domain.Entities.CarCoordinates", b =>
                {
                    b.HasOne("CarSharing.Domain.Entities.Car", "Car")
                        .WithOne("Coordinates")
                        .HasForeignKey("CarSharing.Domain.Entities.CarCoordinates", "CarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Car");
                });

            modelBuilder.Entity("CarSharing.Domain.Entities.Ride", b =>
                {
                    b.HasOne("CarSharing.Domain.Entities.Car", "Car")
                        .WithMany("Rides")
                        .HasForeignKey("CarId")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.HasOne("CarSharing.Domain.Entities.Client", "Client")
                        .WithMany("Rides")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.HasOne("CarSharing.Domain.Entities.Wallet", "Wallet")
                        .WithMany("Rides")
                        .HasForeignKey("WalletId")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.Navigation("Car");

                    b.Navigation("Client");

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("CarSharing.Domain.Entities.Wallet", b =>
                {
                    b.HasOne("CarSharing.Domain.Entities.Client", "Client")
                        .WithMany("Wallets")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("CarSharing.Domain.Entities.Car", b =>
                {
                    b.Navigation("Coordinates");

                    b.Navigation("Rides");
                });

            modelBuilder.Entity("CarSharing.Domain.Entities.Client", b =>
                {
                    b.Navigation("Rides");

                    b.Navigation("Wallets");
                });

            modelBuilder.Entity("CarSharing.Domain.Entities.Tariff", b =>
                {
                    b.Navigation("Cars");
                });

            modelBuilder.Entity("CarSharing.Domain.Entities.Wallet", b =>
                {
                    b.Navigation("Rides");
                });
#pragma warning restore 612, 618
        }
    }
}
